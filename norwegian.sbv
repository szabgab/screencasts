0:00:03.700,0:00:06.190
Hei og velkommen tilbake til kanalen

0:00:06.190,0:00:09.070
Denne gangen skal jeg
snakke om den innebygde feilsøkeren

0:00:09.070,0:00:11.309
i perl

0:00:11.309,0:00:14.089
Normalt hvis du har et skript

0:00:14.089,0:00:16.350
La oss her si 'outline.pl'

0:00:16.350,0:00:21.569
Du kan kjøre det på denne måten i kommandolinjen
perl 'navn på skriptet' og eventuelle parametre

0:00:21.569,0:00:23.960
Så la oss se hvis jeg kjører dette skriptet

0:00:23.960,0:00:25.599
Vi kan se at det gir noe utdata

0:00:25.599,0:00:29.849
Måten å feilsøke på er å kjøre
perl -d

0:00:29.849,0:00:33.120
og så navnet på skriptet
og så parametrene

0:00:33.120,0:00:33.770
Når

0:00:33.770,0:00:36.240
jeg kjører dette

0:00:36.240,0:00:38.920
vil det gi en form for utdata

0:00:38.920,0:00:43.340
Skriver ut den første linjen med kode,
den neste linjen som

0:00:43.340,0:00:45.010
skal bli utført

0:00:45.010,0:00:47.220
og gir meg en mulighet

0:00:47.220,0:00:50.290
til å skrive inn ulike kommandoer
til feilsøkeren.

0:00:50.290,0:00:51.839
Først og fremst

0:00:51.839,0:00:52.610
har vi 'q'

0:00:52.610,0:00:54.960
som lar oss avslutte feilsøkeren

0:00:54.960,0:00:58.000
Så når vi vil kvitte oss med den

0:00:58.000,0:00:58.689
Trykker vi

0:00:58.689,0:01:00.950
q 'enter' og den avsluttes

0:01:00.950,0:01:02.820
La oss nå kjøre det igjen

0:01:02.820,0:01:04.840
Det nest viktigste

0:01:04.840,0:01:06.420
som er 'h'

0:01:06.420,0:01:08.390
Gir oss denne hjelpen

0:01:08.390,0:01:12.100
Så her kan du se du ulike alternativene.
Dette er faktisk kortlisten

0:01:12.100,0:01:13.840
til feilsøkeren

0:01:13.840,0:01:18.110
Så du kan se at det er mange
potensielle...

0:01:18.110,0:01:20.800
måter å bruke feilsøkeren på

0:01:20.800,0:01:24.520
For å se koden igjen

0:01:24.520,0:01:25.530
trykker jeg 'l'

0:01:25.530,0:01:29.120
som gir en oversikt over koden

0:01:29.120,0:01:30.400
I denne 'l'

0:01:30.400,0:01:33.660
I denne oversikten vil du
se linjenumrene

0:01:33.660,0:01:35.830
og denne pilen peker til den linjen som er den

0:01:35.830,0:01:39.260
neste linjen som skal bli utført. Så denne linjen

0:01:39.260,0:01:40.240
har ikke blitt utført ennå

0:01:40.240,0:01:43.690
Hvis jeg vil se hva som er i
$file-variablen

0:01:43.690,0:01:45.430
som

0:01:45.430,0:01:47.100
faktisk skal være tom

0:01:47.100,0:01:49.750
Jeg kan bruke

0:01:49.750,0:01:52.720
'p'-kommandoen som står for print (skriv ut)

0:01:52.720,0:01:54.799
Gi navnet på variablen

0:01:54.799,0:01:56.799
og den vil ikke skrive ut noe

0:01:56.799,0:01:59.269
Jeg burde faktisk sjekk om

0:01:59.269,0:02:02.720
den er definert eller ikke.

0:02:02.720,0:02:05.750
Så, jeg kan skrive 'p' 'defined' og trykke enter

0:02:05.750,0:02:06.869
feil

0:02:06.869,0:02:08.499

0:02:08.499,0:02:10.419
Så den skriver ikke ut noe

0:02:10.419,0:02:14.299
Hvis jeg skulle prøve å gjøre noe
mer komplisert kunne jeg prøve

0:02:14.299,0:02:18.680
hvis ikke definert og den vil skrive ut en form for sann verdi

0:02:18.680,0:02:20.180
Men uansett.

0:02:20.180,0:02:24.670
La oss se hvordan jeg kan utføre disse linjene

0:02:24.670,0:02:26.959
Jeg vil gå tilbake til dette punktet

0:02:26.959,0:02:29.219
og utføre denne linjen med kode

0:02:29.219,0:02:33.729
For å gjøre det skriver jeg 's'
som betyr steg eller stig inn

0:02:33.729,0:02:35.669
og trykker 'enter'

0:02:35.669,0:02:39.560
Det vil utføre den linjen med kode
og vise meg den neste

0:02:39.560,0:02:41.269
linjen som skal bli utført

0:02:41.269,0:02:46.040
Skriver jeg ut
innholdet til filen

0:02:46.040,0:02:49.140
Da vil du se at den allerede har
verdien som ble

0:02:49.140,0:02:51.519
gitt til den i kommandolinjen

0:02:51.519,0:02:53.119
Når jeg har denne

0:02:53.119,0:02:54.519
informasjonen

0:02:54.519,0:02:58.139
og jeg vet hva jeg vil kalle
den neste linjen

0:02:58.139,0:03:01.379
Den neste linjen kaller
slurp-funksjonen

0:03:01.379,0:03:04.180
som kommer fra en annen modul

0:03:04.180,0:03:05.949
Trykke 's' igjen

0:03:05.949,0:03:06.939
vil utføre

0:03:06.939,0:03:08.619
den neste

0:03:08.619,0:03:09.499
delen med kode

0:03:09.499,0:03:11.999
som faktisk kaller den

0:03:11.999,0:03:13.959
funksjonen

0:03:13.959,0:03:17.539
Så hva du ser her er at denne gangen

0:03:17.539,0:03:19.200
skrev den ut den første

0:03:19.200,0:03:19.839
linjen

0:03:19.839,0:03:22.430
som skal utføres i den andre filen

0:03:22.430,0:03:23.480
Så du kan se at

0:03:23.480,0:03:25.150
dette er navnet på

0:03:25.150,0:03:26.619
pakken

0:03:26.619,0:03:29.309
hvor koden finnes

0:03:29.309,0:03:32.819
read_file er navnet på 
funksjonen som blir kalt
som er litt

0:03:32.819,0:03:36.919
rart fordi vi kalte en funksjon
som heter 'slurp'

0:03:36.919,0:03:38.270
og istedetfor det

0:03:38.270,0:03:38.990
kjører vi read_file

0:03:38.990,0:03:40.950
Og du må se hva som

0:03:40.950,0:03:44.559
skjer der og dette er navnet på filen

0:03:44.559,0:03:48.479
den faktiske implementeringen av
read_file-funksjonen

0:03:48.479,0:03:51.010
Og vi er i linje 75

0:03:51.010,0:03:52.749
Så dette er den neste

0:03:52.749,0:03:55.489
linjen som skal bli utført

0:03:55.489,0:04:00.029
La oss se rundt, så la oss skrive 'l'

0:04:00.029,0:04:02.919
og en rekke linjenummere

0:04:02.919,0:04:04.309
70 til 80

0:04:04.309,0:04:06.310
og for å vise oss linjene

0:04:06.310,0:04:08.119

0:04:08.119,0:04:11.419
Fil/Slurp.pm

0:04:11.419,0:04:15.449
Mellom de linjene. Og her kan du
se at ja, vi er i

0:04:15.449,0:04:17.419
read_file

0:04:17.419,0:04:19.680
funksjonen som den var fortalt

0:04:19.680,0:04:20.580
over den

0:04:20.580,0:04:25.340
Du ser at faktisk slurp-funksjonen
er et alias til read_file-funksjonen

0:04:25.340,0:04:28.650
Så det forklarer hvorfor når vi kaller slurp

0:04:28.650,0:04:29.560
det faktisk

0:04:29.560,0:04:32.530
får oss inn i read_file-funksjonen

0:04:32.530,0:04:34.280
inne i read_file-funksjonen

0:04:34.280,0:04:35.469

0:04:35.469,0:04:37.850
Dette er det neste steget som skal bli utført

0:04:37.850,0:04:39.750
Hvis jeg vil utføre

0:04:39.750,0:04:41.470
kan jeg trykke 's' igjen

0:04:41.470,0:04:44.280
men det er faktisk ikke nødvendig
fordi hvis jeg bare

0:04:44.280,0:04:47.949
trykker 'enter' som du ikke kan se
utføres den samme 's'-en

0:04:47.949,0:04:51.690
som ble oppgitt tidligere

0:04:51.690,0:04:55.389
Denne veien kan jeg bare trykke 'enter'
hele tiden og se det gå

0:04:55.389,0:04:56.830
steg for steg

0:04:56.830,0:04:58.160
og gå over

0:04:58.160,0:04:59.659
alle verdiene

0:04:59.659,0:05:03.110
Alle stegene som er i koden.

0:05:03.110,0:05:07.499
Nå, etter alt du kanskje tror
dette er ikke funksjonen du

0:05:07.499,0:05:09.409
vil feilsøke med

0:05:09.409,0:05:10.539
Du ville komme deg

0:05:10.539,0:05:12.659
over til den funksjonen

0:05:12.659,0:05:15.899
så du gikk inn i den slurp-funksjonen
men du bryr deg egentlig ikke

0:05:15.899,0:05:19.209
Fordi du vet at
problemet, hva du nå ser etter

0:05:19.209,0:05:20.069
ikke er der

0:05:20.069,0:05:23.019
Så du vil tilbake fra den
funksjonen

0:05:23.019,0:05:24.470
Uten å gå

0:05:24.470,0:05:25.979
gjennom alle

0:05:25.979,0:05:31.490
linjen en etter en
for dette har vi 'r'-kommandoen

0:05:31.490,0:05:32.949
Før vi gjør det

0:05:32.949,0:05:34.239
La oss gjøre noe annet

0:05:34.239,0:05:37.729
La oss se på 't'-kommandoen
som gir oss stakksporingen

0:05:37.729,0:05:40.199
Så når jeg trykker 't'
kan jeg se

0:05:40.199,0:05:41.789
hvor jeg er

0:05:41.789,0:05:46.019
i koden og du kan se at
dette er det eneste kallet

0:05:46.019,0:05:48.280
som har blitt gjort så det er bare en

0:05:48.280,0:05:50.879
funksjon i denne

0:05:50.879,0:05:52.949
Trykke 'r'

0:05:52.949,0:05:55.979
vil returnere fra den nåværende funksjonen

0:05:55.979,0:06:00.890
og skrive ut deres returverdier
fordi denne gangen returverdien

0:06:00.890,0:06:04.249
er innholdet i Padre pm-filen

0:06:04.249,0:06:06.540
Du ser innholdet til
filen

0:06:06.540,0:06:10.199
som bare er slutten på pm-filen
med dokumentasjonen

0:06:10.199,0:06:13.620
Og med listen på navnene
til de personene

0:06:13.620,0:06:19.729
som bidro til Padre-prosjektet.
Takk til alle dem

0:06:19.729,0:06:21.320
Så vi går tilbake til koden.

0:06:21.320,0:06:24.939
Her kan du nå se den neste
linjen

0:06:24.939,0:06:26.930
som skal bli utført

0:06:26.930,0:06:28.470
Som er et kall til

0:06:28.470,0:06:32.300
editorverktøy, omriss, ny og så definer

0:06:32.300,0:06:33.399
funksjon

0:06:33.399,0:06:35.039


0:06:35.039,0:06:40.099
Så la oss trykke 's' igjen
og gå inn i den metoden

0:06:40.099,0:06:42.180
La oss se oss rundt

0:06:42.180,0:06:46.680
fra 45 til la oss si 60

0:06:46.680,0:06:49.059
Du vil se her,

0:06:49.059,0:06:52.050
Sannsynligvis er de bare tomme
linjer som ikke er vist her

0:06:52.050,0:06:56.879
Og så er vi i finn-metoden
på den første linjen til den.

0:06:56.879,0:06:57.709
Så nå kan du

0:06:57.709,0:07:00.210
gå igjen

0:07:00.210,0:07:02.010
på dette tidspunktet

0:07:02.010,0:07:08.089
Vi bestemmer at vi ikke bryr oss om
process_doc så vi vil ikke gå inn

0:07:08.089,0:07:09.409
Tidligere

0:07:09.409,0:07:13.589
gikk vi inn i slurp-funksjonen og så
fant vi senere ut at vi

0:07:13.589,0:07:16.990
ikke brydde seg om den og vi gikk ut av den
ved å bruke 'r'

0:07:16.990,0:07:20.089
Denne gangen kan vi bruke 'n'-bokstaven

0:07:20.089,0:07:21.719
som betyr neste steg

0:07:21.719,0:07:25.130
og hvis jeg trykker 'enter' her

0:07:25.130,0:07:27.999
Vil koden til process_doc bli utført

0:07:27.999,0:07:31.130
men feilsøkeren vil stoppe

0:07:31.130,0:07:32.120
på dette punktet

0:07:32.120,0:07:33.360
rett etter

0:07:33.360,0:07:34.909
funksjons-kallet

0:07:34.909,0:07:38.069
Så den neste linjen 53

0:07:38.069,0:07:40.620
Her på toppen kan du se
at dette er den neste

0:07:40.620,0:07:42.130
linjen som skal bli utført

0:07:42.130,0:07:43.839
Og her er hvor vi er

0:07:43.839,0:07:45.750
Nå kan vi trykke 'enter' igjen

0:07:45.750,0:07:47.619
og 'enter' vil gjøre

0:07:47.619,0:07:51.460
enten 's' eller 'n' so hver vil
gå inn eller gå over

0:07:51.460,0:07:55.030
Avhengig av hva som var det siste vi gjorde tidligere

0:07:55.030,0:07:56.179
Så hvis jeg trykker 'enter' nå

0:07:56.179,0:07:58.270
går den over koden

0:07:58.270,0:08:01.419
gjennom ppi-en

0:08:01.419,0:08:02.800
og

0:08:02.800,0:08:06.750
jeg tror det holder for nå
jeg vil sannsynligvis gi en annen

0:08:06.750,0:08:08.770
veiledning om dette

0:08:08.770,0:08:14.629
Bare ikke glem at å bruke 'q' lar deg
avslutte feilsøkeren

0:08:14.629,0:08:18.830
Hvis du er interessert i å lese mer
om feilsøkeren

0:08:18.830,0:08:23.529
finnes det en flott bok
la meg vise deg denne

0:08:23.529,0:08:27.889
Jeg anbefaler å kjøpe denne boken og lese den

0:08:27.889,0:08:30.830
Jeg skrev den ikke

0:08:30.830,0:08:33.680
men du kan lære ganske
mye fra den

0:08:33.680,0:08:36.090
Så takk for at du så på og

0:08:36.090,0:08:36.790
vennligst kom tilbake senere
















