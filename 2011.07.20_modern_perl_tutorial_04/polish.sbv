0:00:01.600,0:00:04.533
Cześć, witam znów oglądających kanał Samouczków do Perl-a

0:00:04.533,0:00:08.733
Dziś opowiem o paru funkcjach,

0:00:08.733,0:00:12.800
które obsługują ciągi znaków w perlu

0:00:12.800,0:00:14.768
Zacznijmy od...

0:00:14.768,0:00:16.463
Otwórzmy inne okno

0:00:16.463,0:00:20.932
A więc, jednymi z podstawowych funkcji są

0:00:20.932,0:00:24.056
lc, zwróci nam ona ciąg znaków małymi literami,

0:00:24.056,0:00:26.423
uc, zwróci nam ciąg znaków dużymi literami,

0:00:26.423,0:00:30.324
oraz length, zwróci nam ilość znaków w ciągu.

0:00:30.324,0:00:34.643
Napisałem parę przykładowych plików

0:00:34.643,0:00:38.000
Mamy tutaj $str - string-a

0:00:38.000,0:00:40.936
"HeLlo" z dużym L tu i małym l

0:00:40.936,0:00:43.533
Po uruchomieniu skryptu

0:00:43.533,0:00:46.000
Uruchommy go, zobaczysz jak to działa

0:00:46.000,0:00:50.712
Widać, że pierwsza funkcja zwraca "hello" małymi literami

0:00:50.712,0:00:53.267
Druga dużymi

0:00:53.267,0:00:57.213
A ostatnia ilość znaków w ciągu

0:00:57.213,0:01:02.206
Żadna z tych funkcji nie zmienia zmiennej

0:01:02.206,0:01:05.781
Jeśli chcesz ją zmienić, musisz wpisać:

0:01:05.781,0:01:10.159
$str = lc $str;

0:01:10.174,0:01:14.490
A następnie znów wypisać $str

0:01:14.490,0:01:18.420
Jeśli teraz uruchomimy program widzimy,

0:01:18.420,0:01:22.274
że $str jest pisany małymi literami.

0:01:22.274,0:01:25.405
To były prostsze funkcje

0:01:25.405,0:01:27.799
Przejdźmy do tych nieco bardziej skomplikowanych

0:01:27.799,0:01:30.230
jak np. index

0:01:30.230,0:01:32.856
Index przyjmuje dwa argumenty

0:01:32.856,0:01:36.186
jednym z nich jest tekst, jak ten tutaj

0:01:36.186,0:01:38.686
Powiększmy trochę czcionkę

0:01:38.686,0:01:43.371
Pierwszym parametrem jest string

0:01:43.371,0:01:45.102
to tutaj,

0:01:45.102,0:01:47.773
drugim parametrem jest również string

0:01:47.773,0:01:50.017
zwykle krótszy

0:01:50.017,0:01:55.867
ponieważ będziemy go szukać w tekście

0:01:55.867,0:01:59.814
Jeśli uruchomimy index na tym tekście, podając jako argument "cat"

0:01:59.814,0:02:01.765
funkcja zwróci nam 10

0:02:01.765,0:02:06.269
ponieważ "cat" zaczyna się na 10. pozycji

0:02:06.269,0:02:11.425
wskaźnik pierwszego znaku to 0

0:02:11.425,0:02:13.561
dlatego duże T to 0

0:02:13.561,0:02:17.651
i w ten sposób dochodzimy do "c" na 10. miejscu

0:02:17.651,0:02:22.266
Jeśli uruchomię znów funkcję, tym razem z wzorcem "dog"

0:02:22.266,0:02:24.133
dostaniemy -1

0:02:24.133,0:02:26.667
jako że w tekście jest "cat",

0:02:26.667,0:02:28.685
nie ma "dog"

0:02:28.685,0:02:33.605
Funkcja zwraca -1 jeśli napotka błąd lub nie znajdzie wystąpienia

0:02:33.605,0:02:37.942
Jeśli wywołasz funkcję podając wzorzec,

0:02:37.942,0:02:42.667
który nie występuje w tekście dostaniesz -1

0:02:42.667,0:02:45.419
Może to nie jest najlepsza metoda

0:02:45.419,0:02:48.723
ale tak to jest zaimplementowane

0:02:48.723,0:02:55.199
Jeśli uruchomię index ze stringiem "The", duże T

0:02:55.199,0:02:56.932
dostaniemy 0

0:02:56.932,0:03:01.599
Funkcja wskazuje na wskaźnik 0

0:03:01.599,0:03:04.733
Więc znajdziemy "The" na początku

0:03:04.733,0:03:07.709
i zwróci 0, ponieważ tam się zaczyna

0:03:07.709,0:03:12.000
Następne wywołanie, to tutaj, zwraca 26

0:03:12.000,0:03:16.733
ponieważ index szuka dokładnie takiego samego ciągu

0:03:16.733,0:03:19.266
zważa na wielkość liter

0:03:19.266,0:03:23.012
dlatego pierwsze "The" nie zgadza się, bo ma duże T

0:03:23.012,0:03:26.633
więc poszuka innego "the" i tam je znajdzie

0:03:26.633,0:03:30.953
Możesz myśleć, że index szuka słowa

0:03:30.953,0:03:34.236
ale nie o to chodzi, funkcja szuka

0:03:34.236,0:03:38.943
podciągu znaków, czyli znaków, jeden po drugim

0:03:38.943,0:03:41.266
W następnym przykładzie widać,

0:03:41.266,0:03:44.266
że szukamy string-a:

0:03:44.266,0:03:47.599
"e ", litery e i spacji

0:03:47.599,0:03:49.332
index zwróci nam 2

0:03:49.332,0:03:52.067
zaznaczyłem tutaj

0:03:52.067,0:03:55.707
miejsce, gdzie ten ciąg występuje

0:03:55.707,0:04:00.395
ale jak widać, dalej też jest "e "

0:04:00.395,0:04:05.457
Można o nie spytać podając funkcji index trzeci parametr

0:04:05.457,0:04:11.401
tutaj wpisałem 3, ale to może być jakakolwiek liczba

0:04:11.401,0:04:16.867
index zacznie poszukiwania od trzeciej pozycji

0:04:16.867,0:04:19.762
co jest czwartym znakiem

0:04:19.762,0:04:22.867
ponieważ zaczynamy liczyć od 0

0:04:22.867,0:04:25.427
więc trzecie miejsce, numer trzy

0:04:25.427,0:04:29.420
i od tego miejsca znajdzie "the" tutaj

0:04:29.420,0:04:36.841
w tym miejscu, które ma numer 28

0:04:36.841,0:04:42.067
Podobnie, jeśli wyszukam znak "e"

0:04:42.067,0:04:43.307
żeby sprawdzić

0:04:43.307,0:04:46.557
ale podam numer 3 jako trzeci parametr

0:04:46.557,0:04:49.800
znajdziemy "e"

0:04:49.800,0:04:51.016
zobaczmy...

0:04:51.016,0:04:53.399
o tutaj, w słowie "jumped"

0:04:53.399,0:04:55.333
tutaj jest znak "e"

0:04:55.333,0:04:57.702
i to właśnie znajdziemy

0:04:57.702,0:05:00.350
Oczywiście 3 możemy zastąpić dowolną liczbą

0:05:00.350,0:05:01.928
więc możemy zacząć od 5

0:05:01.928,0:05:04.466
i dostaniemy tą samą wartość

0:05:04.466,0:05:06.666
Uruchommy skrypt

0:05:06.666,0:05:10.000
Widzimy wartości:

0:05:10.000,0:05:15.838
10, -1, 0, 26, 2, 28, 18

0:05:15.838,0:05:17.681
to takie same wartości

0:05:17.681,0:05:19.807
nie ma znaczenia gdzie dokładnie zaczynasz

0:05:19.807,0:05:21.415
dopóki zaczynasz przed

0:05:21.415,0:05:24.770
wystąpieniem podciągu

0:05:24.770,0:05:27.132
I to jest właśnie funkcja index

0:05:27.132,0:05:31.132
Jest też funkcja rindex

0:05:31.132,0:05:32.394
robiąca to samo z tą różnicą

0:05:32.394,0:05:33.973
że przeszukuje od prawej do lewej

0:05:33.973,0:05:35.690
To dość interesujące

0:05:35.690,0:05:38.430
jeśli mamy wiele wystąpień tego samego ciągu

0:05:38.430,0:05:42.676
i znajdzie to najbardziej wysunięte na prawo

0:05:42.676,0:05:45.187
Wywołanie rindex na tym samym ciągu

0:05:45.187,0:05:47.649
podając "e" jako wzorzec

0:05:47.649,0:05:49.507
dostaniemy 39

0:05:49.507,0:05:53.071
ponieważ znajdzie literę "e"

0:05:53.071,0:05:56.216
rindex może przyjąć również trzeci argument

0:05:56.216,0:05:58.386
mówiący od jakiego momentu zacząć

0:05:58.386,0:06:01.902
Pozycję startową wskaźnika

0:06:01.902,0:06:03.666
Więc jeśli wpiszę 38

0:06:03.666,0:06:06.666
znajdzie literę "e" tutaj

0:06:06.666,0:06:07.951
zwracając 38

0:06:07.951,0:06:11.009
Jeśli zaczniemy od 37 pozycji

0:06:11.009,0:06:15.533
wtedy znajdziemy "e" na miejscu 33

0:06:15.533,0:06:17.346
To właśnie robi rindex

0:06:17.346,0:06:20.552
Ostatnią funkcją, najciekawszą

0:06:20.552,0:06:22.533
z tych, o których opowiem

0:06:22.533,0:06:24.507
jest substring

0:06:24.507,0:06:27.800
Substring jest dokładnie przeciwieństwem index

0:06:27.800,0:06:31.882
W index wiesz czego szukasz

0:06:31.882,0:06:33.182
jakiego ciągu znaków szukasz

0:06:33.182,0:06:34.670
nie wiesz tylko, gdzie on jest

0:06:34.670,0:06:36.295
Więc szukasz położenia

0:06:36.295,0:06:38.478
W substring znasz lokalizację

0:06:38.478,0:06:40.288
nie wiesz tylko co tam jest

0:06:40.288,0:06:42.547
i chcesz zobaczyć co tam jest

0:06:42.547,0:06:45.699
Substring przyjmuje string-a jako argument,

0:06:45.699,0:06:48.531
czyli np. "The black cat climbed the green tree";

0:06:48.531,0:06:51.713
liczbę, przesunięcie, czyli nasz wskaźnik

0:06:51.713,0:06:54.266
do początku wyrażenia, którego szukamy

0:06:54.266,0:06:56.379
w tekście

0:06:56.379,0:07:01.348
znów liczba 0 wskazuje na pierwszy znak

0:07:01.348,0:07:06.156
4 pokazuje "b";

0:07:06.156,0:07:09.685
Trzeci parametr to długość

0:07:09.685,0:07:11.542
ciągu znaków, który ściągamy

0:07:11.542,0:07:13.423
Więc jako że podano długość 5

0:07:13.423,0:07:16.557
funkcja zwróci 5 znaków, zaczynając od litery "b"

0:07:16.557,0:07:20.320
...czyli słowo "black"

0:07:20.320,0:07:22.733
Substring zwraca te wartości

0:07:22.733,0:07:24.768
i oczywiście mogę je przypisać do...

0:07:24.768,0:07:31.233
tego, co pokazałem wam w przykładzie o lc i index

0:07:31.233,0:07:34.158
... możesz zapisać wartość w zmiennej

0:07:34.158,0:07:38.432
Tutaj też, jestem troszkę leniwy, więc po prostu wypisuję wynik

0:07:38.432,0:07:43.045
To wywołanie zwróci słowo "black"

0:07:43.045,0:07:46.067
W następnym przykładzie można zobaczyć,

0:07:46.067,0:07:49.437
że długość może być też ujemną liczbą

0:07:49.437,0:07:51.733
Jak to się dzieje, że można tutaj wpisać ujemną liczbę?

0:07:51.733,0:07:56.449
Zamiast używać paramteru jako prawdziwej długości

0:07:56.449,0:08:00.583
Perl twierdzi, że ta czwórka oznacza

0:08:00.583,0:08:03.415
ile znaków z lewej strony odłożyć

0:08:03.415,0:08:05.180
a ta liczba mówi

0:08:05.180,0:08:08.333
ile znaków z prawej strony nie objąć

0:08:08.333,0:08:12.067
Suma sumarum to wszystko mówi: policz 4 od lewej

0:08:12.067,0:08:14.446
policz 11 od prawej

0:08:14.446,0:08:15.924
i cokolwiek się znajdzie w środku

0:08:15.924,0:08:17.394
- to chcę, żebyś mi zwrócił

0:08:17.394,0:08:22.920
I w ten sposób dostaliśmy "black cat climed the"

0:08:22.920,0:08:26.666
Może się zdarzyć, że możesz pominąć trzeci argument

0:08:26.666,0:08:29.942
co by znaczyło:

0:08:29.942,0:08:34.532
daj mi ciąg znaków od 14 pozycji do końca

0:08:34.532,0:08:38.326
ponieważ nie wiem, ile może pozostawać znaków

0:08:38.326,0:08:42.461
Więc po prostu to znaczy: od danego wskaźnika do końca

0:08:42.461,0:08:44.440
Jak widzisz,

0:08:44.440,0:08:47.265
nawet pierwszy argument, pozycja

0:08:47.265,0:08:49.055
może być liczbą ujemną

0:08:49.055,0:08:51.726
a to, jak pewnie zgadłeś,

0:08:51.726,0:08:53.353
to liczenie od tyłu

0:08:53.353,0:08:57.594
Więc zamiast mówić, że to długość mniej 4

0:08:57.594,0:08:59.793
mówisz po prostu -4

0:08:59.793,0:09:03.994
a to znaczy: zacznij od tej pozycji

0:09:03.994,0:09:06.994
A ponieważ w przykładzie

0:09:06.994,0:09:09.793
nie podałem liczby znaków

0:09:09.793,0:09:12.553
więc dostanę cały ciąg aż do końca

0:09:12.553,0:09:16.373
w tym przypadku 4 litery "tree"

0:09:16.373,0:09:19.076
Oczywiście, jak widać w przykładzie,

0:09:19.076,0:09:21.619
można podać też trzeci argument

0:09:21.619,0:09:23.660
wtedy dostaniesz

0:09:23.660,0:09:27.594
dwa znaki z ostatnich czterech

0:09:27.594,0:09:29.394
czyli "tr"

0:09:29.394,0:09:31.757
Zweryfikujmy uruchamiając program

0:09:31.757,0:09:33.994
zgadza się, mamy "tr"

0:09:33.994,0:09:36.326
A jeśli bym na przykład zmienił trochę kod

0:09:36.326,0:09:40.040
i wpisał tutaj "1"

0:09:40.040,0:09:45.630
po uruchomieniu dostajemy tylko "t"

0:09:45.630,0:09:49.421
Jeśli podam liczbę "3" i uruchomię

0:09:49.421,0:09:54.395
dostanę "tre", rozumiesz

0:09:54.395,0:09:57.247
Ostatni przykład jest trochę inny

0:09:57.247,0:10:00.462
Dotychczas funkcje zwracały ciąg znaków,

0:10:00.462,0:10:05.719
a oryginalny $str nie zmieniał się

0:10:05.719,0:10:09.970
W poprzednim przykładzie, zwracana wartość jest nadal taka sama

0:10:09.970,0:10:13.447
zdefiniowana przez trzy pierwsze argumenty

0:10:13.447,0:10:15.616
W ostatnim przykładzie

0:10:15.616,0:10:17.847
mamy również czwarty parametr

0:10:17.847,0:10:23.457
w tym przypadku będący ciągiem "jumped from"

0:10:23.457,0:10:26.309
Teraz, w tym przypadku

0:10:26.309,0:10:31.663
funkcja Perl-a substring zamieni ciąg

0:10:31.663,0:10:36.180
znaleziony przez trzy pierwsze paramtery

0:10:36.180,0:10:39.328
na ciąg z czwartego parametru

0:10:39.328,0:10:49.447
Więc, skoro "14, 7" to słowo "climbed",

0:10:49.447,0:10:55.796
zwrócona wartość, $z, to będzie "climbed"

0:10:55.796,0:10:59.796
ale $str będzie już inne

0:10:59.796,0:11:04.734
a słowo "climbed" zostanie zastąpione przez słowo "jumped from",

0:11:04.734,0:11:07.816
dwa słowa, ciąg znaków właściwie

0:11:07.816,0:11:10.713
W tym przypadku $str będzie zawierał:

0:11:10.713,0:11:13.380
"The black cat jumped from the green tree"

0:11:13.380,0:11:15.970
Jak widzisz, Perl nie przejmuje się

0:11:15.970,0:11:20.221
czy nowy ciąg jest dłuższy

0:11:20.221,0:11:22.236
niż poprzedni

0:11:22.236,0:11:24.955
po prostu zrobi dla niego dość miejsca

0:11:24.955,0:11:28.159
dla przykładu

0:11:28.159,0:11:29.836
Puśćmy program raz jeszcze

0:11:29.836,0:11:31.129
dzięki temu zobaczysz

0:11:31.129,0:11:33.242
"The black cat jumped from the green tree"

0:11:33.242,0:11:34.513
to po prostu działa

0:11:34.513,0:11:38.882
Co się stanie, jeśli zamienię ciąg na literę "j"

0:11:38.882,0:11:40.878
i uruchomię? Zobaczymy:

0:11:40.878,0:11:43.334
"The black cat j the green tree"

0:11:43.334,0:11:45.498
cokolwiek to znaczy

0:11:45.498,0:11:49.534
Różnice w długości ciągów nie mają znaczenia

0:11:49.534,0:11:51.447
Możesz podać nawet pusty ciąg,

0:11:51.447,0:11:53.939
byleby był tutaj podany

0:11:53.939,0:11:59.275
a wtedy substring Perl-a wytnie tą część ciągu

0:11:59.275,0:12:01.196
i zostawi, w tym przypadku, dwie spacje,

0:12:01.196,0:12:03.955
spację przed słowem "climbed"

0:12:03.955,0:12:05.713
i po nim

0:12:05.713,0:12:07.565
To tyle jeśli chodzi o substring

0:12:07.565,0:12:09.247
Mam nadzieję, że czegoś się nauczyliście

0:12:09.247,0:12:11.165
Powrócimy do następnej części

0:12:11.165,0:12:12.898
a jeśli oglądasz to na YouTube

0:12:12.898,0:12:15.196
zasubskrybuj nasz kanał

0:12:15.196,0:12:17.446
Dzięki raz jeszcze, do zobaczenia
