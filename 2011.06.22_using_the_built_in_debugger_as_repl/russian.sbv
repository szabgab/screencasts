0:00:04.029,0:00:08.730
Добро пожаловать обратно на канал. 
В этот раз я собираюсь показать Вам,
как использовать

0:00:08.730,0:00:10.989
встроенный отладчик perl т.н. 
REPL (Read Eval Print Loop)


0:00:10.989,0:00:12.389
среда, где реализваны 3 функции - 
чтение, вычисление и печать и 
объединены в бесконечный цикл

0:00:12.389,0:00:15.339
сейчас мы не будем отлаживать perl 
скрипт, 

0:00:15.339,0:00:19.559
а будем исследовать как работает
сам perl

0:00:19.559,0:00:22.019
итак идем к командной строке

0:00:22.019,0:00:24.060
как вы знаете, в perl вы можете

0:00:24.060,0:00:28.079
писать однострочные скрипты, используя 
параметр -e perl -e 'print 42'

0:00:28.079,0:00:31.939
если вы его выполните, то он вернет 42 

0:00:31.939,0:00:35.380
таким же образом вы можете дать 1 

0:00:35.380,0:00:37.040
как значение print -e 1

0:00:37.040,0:00:40.660
как вы видите в этом случае 

0:00:40.660,0:00:41.770
ничего на экране не проиходит

0:00:41.770,0:00:45.090
и теперь, добавляя -d 

0:00:45.090,0:00:47.120
мы может отладить то, что нам нужно
perl -d -e 1

0:00:47.120,0:00:52.770
а еще лучше объединить параметры
perl -de1 - и это хорошая новость для нас,


0:00:52.770,0:00:57.420
что можно все параметры соединить в один

0:00:57.420,0:00:58.750
и теперь, когда я запустил это

0:00:58.750,0:01:04.360
открылся отладчик и дал мне propmt,

0:01:04.360,0:01:05.540
командную строку

0:01:05.540,0:01:10.200
и теперь мы можем напечатать любую 
комманду

0:01:10.080,0:01:12.299
например я могу напечатать

0:01:12.299,0:01:16.230
сорок два 42 и получить на выходе 
сорок два

0:01:16.230,0:01:19.920
или я могу сказать $x=42

0:01:19.920,0:01:23.940
и присвоить переменной $x
значение 42 

0:01:23.940,0:01:24.910
теперь я могу 

0:01:24.910,0:01:30.660
напечатать эту переменную print $x

0:01:30.660,0:01:32.830
или я могу использовать встроенную
команду p в отладчике

0:01:32.830,0:01:36.040
которая напечатает то же значение

0:01:36.040,0:01:38.950
теперь присвоим значения массиву

0:01:38.950,0:01:42.350
например массив 

0:01:42.350,0:01:47.210
@names=qw(Foo Bar Baz)

0:01:47.210,0:01:52.740
и теперь я могу распечатать names
print @names

0:01:52.740,0:01:54.540

0:01:54.540,0:01:57.550
Очевидно, что вывод выглядит не очень хорошо

0:01:57.550,0:01:58.520
лучше поставить двойные кавычки

0:01:58.520,0:02:00.659
вокруг массива

0:02:00.659,0:02:04.420
теперь это выглядит намного лучше,т.к.
вокруг переменных появились пробелы

0:02:04.420,0:02:08.569
но, как видим, это путь совсем не очевидный

0:02:08.569,0:02:14.869


0:02:14.869,0:02:18.290
лучший путь узнать, что находится 
внутри массива - это использовать

0:02:18.290,0:02:24.159
x \@names и ссылку на массив


0:02:24.159,0:02:28.579

0:02:28.579,0:02:32.429
и когда мы выводим ссылку на массив,
то печатаются и индексы каждого элемента

0:02:32.429,00:02:49.089
таким же путем мы можем создать хэш
%h=(fname => 'Foo', lname => 'Bar')

0:02:49.089,0:02:53.709
и теперь мы имеем хэш 

0:02:53.709,0:02:56.250
и мы можем вывести содержимое 
этого хэша x \%h

0:02:56.250,0:02:58.319


0:02:58.319,0:03:00.059


0:03:00.059,0:03:04.649


0:03:04.649,0:03:05.629


0:03:05.629,0:03:06.859


0:03:06.859,0:03:09.170

0:03:09.170,0:03:10.419


0:03:10.419,0:03:13.159


0:03:13.159,0:03:16.029
теперь воспользуемя функцией
push для добавления значений в массив

0:03:16.029,0:03:20.669
push @names, 'Moose'

0:03:20.669,0:03:23.479
и теперь вернемся назад

0:03:23.479,0:03:27.659
и выведем содержимое массива,
как вы видите - он изменился

0:03:27.659,0:03:31.079


0:03:31.079,0:03:34.759
стал длинее 

0:03:34.759,0:03:38.729
теперь мы можем исследовать perl
код в отладчике

0:03:38.729,0:03:42.869
иногда используя команды perl 

0:03:42.869,0:03:44.270
а иногда команды отладчика

0:03:44.270,0:03:45.619
например напечатать x как пример

0:03:45.619,0:03:47.089


0:03:47.089,0:03:51.399
но еще вы может использовать модуль
use Cwd 

0:03:51.399,0:03:52.319
например

0:03:52.319,0:03:55.040
загрузить этот модуль и все его 
функции 

0:03:55.040,0:03:58.969
и теперь вы можете вызвать функцию cwd

0:03:58.969,0:04:06.259
правда этот код ничего не показывает, потому
что мы не вернули значение

0:04:06.259,0:04:09.549
но, если вы хотите увидеть результат этой 
функции - используйте 
команду отладчика печать p cwd

0:04:09.549,0:04:14.909
которая показывает текущую директорию

0:04:14.909,0:04:16.920
вы можете использовать еще один  модуль 
 use File::Basename


0:04:16.920,0:04:20.069

0:04:20.069,0:04:29.889
он имеет функцию basename

0:04:29.889,0:04:33.740
p basename(cwd) вернем значение функции cwd

0:04:33.740,0:04:35.209
и мы вывели базовую директорию в пути

0:04:35.209,0:04:39.370


0:04:39.370,0:04:40.580


0:04:40.580,0:04:50.299
но, если вы хотите знать, как это
работает, вы должны поставить точку

0:04:50.299,0:04:54.259
останова breakpoint 
 b File::Basename::basename


0:04:54.259,0:04:55.099


0:04:55.099,0:04:56.330
на эту функцию

0:04:56.330,0:05:02.059
итак, если вы хотите поставить
точку останова на файл 

0:05:02.059,0:05:04.620
на функцию basename

0:05:04.620,0:05:09.019
а затем, если я снова это запущу, то
я получу большое сообщение

0:05:09.019,0:05:11.050
если вы снова запускаете этот код
 p basename(cwd)

0:05:11.050,0:05:13.169
то он останавливается на точке

0:05:13.169,0:05:14.840
вызова нашей функции

0:05:14.840,0:05:18.919
basename имя файлы класс Basename

0:05:18.919,0:05:20.169

0:05:20.169,0:05:25.050
которая вызывается из этого файла на
215 строке

0:05:25.050,0:05:26.740
вы можете увидеть код вокруг

0:05:26.740,0:05:32.889
набирая букву l и увидеть 
остальной код 

0:05:32.889,0:05:35.910
можно посмотреть код между строчками
l 200-220

0:05:35.910,0:05:37.789


0:05:37.789,0:05:39.830


0:05:39.830,0:05:41.590
и вы сможете посмотреть несколько строк

0:05:41.590,0:05:43.020


0:05:43.020,0:05:47.719
которые не относятся к логике 
работы самой функции

0:05:47.719,0:05:49.229


0:05:49.229,0:05:51.849
вы можете использовать эти
базовые возможности 


0:05:51.849,0:05:53.899
как хотите для отладки

0:05:53.899,0:05:57.569
или для исследования того, как себя
ведет perl функция

0:05:57.569,0:05:59.409
в конце используем q
для выхода из отладчика

0:05:59.409,0:06:01.330


0:06:01.330,0:06:03.059


0:06:03.059,0:06:04.680
я надеюсь вам понравился 
учебник

0:06:04.680,0:06:08.460
присоединяйтесь к моему каналу

0:06:08.460,0:06:09.280
и возвращайтесь позднее,
до скорой встречи!

