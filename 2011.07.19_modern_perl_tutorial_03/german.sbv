0:00:01.533,0:00:08.533
Hallo, im diesem Tutorial werde ich dir zeigen,
 wie man mit Perl skalare Werte vergleichen kann.

0:00:08.533,0:00:13.667
Ich möchte sehen, ob 1 und 1.0 und 1.00

0:00:13.667,0:00:16.000
gleich sind, oder ob einer größer oder kleiner ist.

0:00:16.000,0:00:21.333
Wie ist es mit 1.00 in einer Zeichenkette, also in Anführungszeichen?

0:00:21.333,0:00:27.283
Wie ist es mit dem Vergleich zwischen “foo” und “bar,” diesen zwei Zeichenketten?

0:00:27.283,0:00:29.283
Also, Perl hat-

0:00:29.283,0:00:34.282
Wir haben gesehen, dass es in Perl Operatoren wie “+” und “.” gibt, sie wandeln

0:00:34.282,0:00:39.282
Zeichenketten in Nummern um und umgekehrt abhängig von ihrem eigenen Kontext.

0:00:39.282,0:00:44.282
Und ihnen ist egal was für einen Wert man in die Variablen hineinsteckt.

0:00:44.282,0:00:46.351
Das ist ähnlich mit den Operatoren.

0:00:46.351,0:00:50.258
Perl hat eigentlich zwei Sätze von Vergleichsoperatoren.

0:00:50.258,0:01:00.239
In diese getrennte Datei habe ich eine Tabelle eingefügt, sodass ihr sehen könnt, dass
 es einen Satz numerische Vergleiche und einen Satz Zeichenkettensvergleiche gibt. 

0:01:00.239,0:01:04.076
== prüft, ob die zwei Seiten gleiche Nummern sind.

0:01:04.076,0:01:07.333
Und eq checkt, ob sie gleiche Zeichenketten sind.

0:01:07.333,0:01:13.439
Und dies würde checken, ob sie nicht gleich sind, und dies wurde 
 prüfen, ob die linke Seite eine kleinere Nummer ist.

0:01:13.439,0:01:16.936
Und lt wurde sie es als Zeichenketten vergleichen. 

0:01:16.936,0:01:20.498
Also, sehen wir wie das funktioniert!

0:01:20.498,0:01:22.398
Machen wir ein Beispiel!

0:01:22.398,0:01:28.878
Vergleichen wir 12 mit 12.0!

0:01:28.878,0:01:37.008
Und wenn das stimmt, wird es TRUE drucken. 

0:01:37.008,0:01:43.997
Sonst druck FALSE aus.

0:01:43.997,0:01:49.208
Also, wenn ich diesen Code laufen lassen, werde ich TRUE zurückbekommen, 
 weil 12 und 12.0 gleich sind. 

0:01:49.208,0:01:54.200
Und Perl klammert Punkt Null aus, obwohl ich hier in 

0:01:54.200,0:01:59.200
Gleitkommaschreibweise schreibe, weil der echte Wert trotzdem nur 12 ist.

0:01:59.200,0:02:04.856
Dasselbe würde passieren, wenn ich hier zwei Nullen einfüge, 
 es macht nichts, immer noch TRUE.

0:02:04.856,0:02:09.945
Und wenn ich hier dies in Anführungszeichen tue, würde das noch stimmen,

0:02:09.945,0:02:14.945
weil Perl die Zeichenkette mit einer Nummer vergleicht, und bekommt die Gleiche.

0:02:14.945,0:02:19.467
Jetzt wenn ich sie mit eq vergleiche, und ich lasse das Skript laufen, bekomme 

0:02:19.467,0:02:25.467
ich FALSE, weil Perl jetzt diese Nummer in eine Zeichenkette umsetzt.

0:02:25.467,0:02:31.892
Also, man bekommt 12 an der linke Seite und 
 12 Punkt Null Null an der rechte Seite.

0:02:31.892,0:02:34.926
Zwei Zeichenketten, und sie sind als Zeichenketten nicht gleich.

0:02:34.926,0:02:37.872
Wie ist es mit dem Vergleich zwischen Nummern?

0:02:37.872,0:02:41.609
Welche ist kleiner, welche ist größer?

0:02:41.609,0:02:43.963
Also, vergleichen wir zwei mit drei!

0:02:43.963,0:02:48.706
Offensichtlich ist zwei kleiner als drei, und ich 
 werde TRUE zurückbekommen, wie du siehst.

0:02:48.706,0:02:50.825
Deshalb ist zwei kleiner als drei.

0:02:50.825,0:02:54.217
Was passiert wenn ich sie als Zeichenketten vergleiche?

0:02:54.217,0:02:55.757
Das ist dasselbe, es ist zwei.

0:02:55.757,0:03:01.759
Stimmt noch, weil zwei kommt vor drei in die ASCII-Tabelle.

0:03:01.759,0:03:08.000
Und was passiert, wenn ich zwölf mit drei vergleiche?

0:03:08.000,0:03:10.267
Das ist offensichtlich.

0:03:10.267,0:03:13.333
Es stimmt, weil zwolf größer als drei ist.

0:03:13.333,0:03:17.538
Aber was passiert wenn ich mit gt vergleiche, der Vergleich der Zeichenketten?

0:03:17.538,0:03:20.015
Dann lass ich es laufen und ich bekomme FALSE.

0:03:20.015,0:03:24.221
Wäre möglich überraschend für einige Leuten, aber wenn Sie daran denken,

0:03:24.221,0:03:28.221
die Weg dies vergleicht, “gt” vergleicht, oder alle die 

0:03:28.221,0:03:32.221
Vergleiche der Zeichenketten vergleichen, ist sie nehmen das erste Zeichen, was eins ist,

0:03:32.221,0:03:37.221
und vergleichen es mit dem ersten Zeichen hier, was drei ist.

0:03:37.221,0:03:40.069
Und wir wissen schon, dass die linke Seite 

0:03:40.069,0:03:44.069
vor der rechten Seite kommt in der ASCII-Tabelle.

0:03:44.069,0:03:55.968
Also, zu diesem Zeitpunkt wird es sich entschieden, dass zwölf als Zeichenkette  
 kleiner als drei ist, und dawegen schickt dieser Ausdruck FALSE zurück.

0:03:55.968,0:04:02.139
Also, was passiert wenn ich “foo” mit “bar” vergleiche?

0:04:02.139,0:04:06.215
Ich vergleiche mit zwei Gleichheitszeichen ob sie gleich sind.

0:04:06.215,0:04:11.523
Und ich lasse es laufen, und erstauntlicherweise gibt es mir TRUE.

0:04:11.523,0:04:16.864
Möglicherweise ist es nicht so überraschend zu denen, die was das heißt wissen.

0:04:16.864,0:04:20.006
Also “==” vergleicht die zwei Seiten als Nummern.

0:04:20.006,0:04:24.008
Und wandelt sie in Nummern um, und das ist warum wir diese Warnungen bekommen.

0:04:24.008,0:04:28.133
Weil “==” nimmt zwei Nummern an.

0:04:28.133,0:04:34.267
Es gibt zwei Zeichenketten, die nicht genaue Nummern
 sind, deshalb gibt Perl mir eine Warnung.

0:04:34.267,0:04:41.133
Und wandelt beide Seiten in null um, weil es  
 Nummern erwartet.

0:04:41.133,0:04:47.013
Es gibt keine Nummern in beiden Zeichenketten,
 also sind beide null. 

0:04:47.013,0:04:54.933
Und deshalb 0 und 0 als Nummern sind gleich,
 so das ist warum Perl hier TRUE druckt.

0:04:54.933,0:05:04.018
Offensichtlich wenn man weiß, das man zwei Dinge vergleichen muss,
 die vielleicht Zeichenketten sind, würde man “eq” benutzen.

0:05:04.018,0:05:12.016
Eigentlich in die meiste Fälle, wurde man “eq” benutzen
 wenn man zwei Zeichenketten vergleicht, zwei Werte.

0:05:12.016,0:05:17.002
So in diesem Fall haben wir offensichtlich FALSE zurückbekommen, wie ich erwartete.

0:05:17.002,0:05:23.869
Etwas, was möglicherweise interessanter ist, ist das auch wenn ich mit einer 
 leeren Zeichenkette vergleiche, bekomme ich das gleiche Problem.

0:05:23.869,0:05:26.554
Ich bekomme TRUE und diese zwei Warnungen.

0:05:26.554,0:05:32.012
Nur um Sie zu erinnern, bekomme ich diese 
 Warnungen nur, weil ich nach diesen Warnungen gefragt habe.

0:05:32.012,0:05:41.996
Also, es ist ziemlich wichtig, dieses pragma zu benutzen, sonst wurde es schwiegend nur
 stimmen, und es wurde sehr überraschend für die meiste Leute sein.

0:05:41.996,0:05:49.948
Offensichtlich hier auch wenn ich “eq” benutze, wurde das in Ordnung sein.
 Wenn ich das Skript laufen lasse, wurde es mir FALSE geben, wie ich erwartete.

0:05:49.948,0:05:53.975
Jetzt sehen wir ein Beispiel, in dem dieses Problem vielleicht auftauchen wird!

0:05:53.975,0:06:08.806
So, “dein Name”.  Sehen wir, dass ich eine Frage ausdruckt,
 und ich akzeptiere eine Zeichenkette von der Befehlszeile.

0:06:08.806,0:06:23.384
Dann lösche ich das Zeilenvorschubzeichen vom Ende, und
 ich markiere, ob das Name gleich null ist.

0:06:23.384,0:06:30.762
Und das ist ein geläufiger Fehler, den einige Leute begehen, die
 das Unterschied zwischen “eq” und “==” nicht kennen.

0:06:30.762,0:06:36.719
So wenn ich hier eine Zeichenkette eintippe, dann bekomme 
 ich alle diese Warnungen, aber ick bekomme TRUE.

0:06:36.719,0:06:41.635
Obwohl was ich prüfte, ich prüfte 
 ob es eine leere Zeichenkette war.

0:06:41.635,0:06:48.664
Und ich bekomme TRUE, weil diese Zeichenkette, “ddd”, 
 auf der linken Seite als Nummer 0 ist.

0:06:48.664,0:06:50.926
“==” wandelt in eine Nummer um. 

0:06:50.926,0:06:53.005
Die rechte Seite ist gleich eine Nummer.

0:06:53.005,0:06:57.950
Deshalb sind die zwei Seiten gleich.

0:06:57.950,0:07:05.006
Das Richtige ist zu prüfen, mit
 eq, ob die Zeichenkette leer ist.

0:07:05.006,0:07:09.999
Also, dann kann ich diesen Code laufen lassen, und wenn ich “ddd” sage, stimmt es nicht.

0:07:09.999,0:07:19.850
Und andererseits, wenn ich dieses Skript laufen lasse, und dann Enter anklicke, ohne
 irgendetwas einzutippen, dann stimmt es, weil jetzt die Folge eine leere Zeichenkette ist.

0:07:19.850,0:07:22.000
Also, das ist wie man Beträge vergleicht.

0:07:22.000,0:07:25.000
Danke für das Ansehen, und bis zum nächsten mal!

